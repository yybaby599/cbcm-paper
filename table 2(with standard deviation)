import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np
import pandas as pd

# Data from Table 2

blue = '#26538d'
orange = '#fb7d07'
green ='#009337'

categories = ['Large', 'Mid', 'Small']

df = pd.read_excel("Data file (2).xlsx")

df_us = df[df['Country of Address'] =='United States of America']
columns=['Market Cap Category','Carbon footprint of the portfolio', 'Portfolio Decarbonization Strategy', 'Monitoring & Reporting']
df_us_filtered = df_us[columns]
df_us_filtered['Market Cap Category'] = df_us_filtered['Market Cap Category'].replace('Micro Cap', 'Small Cap')

df_us_filtered= df_us_filtered.groupby('Market Cap Category').agg({
    'Carbon footprint of the portfolio': ['mean', 'max', 'std'],
    'Portfolio Decarbonization Strategy': ['mean', 'max', 'std'],
    'Monitoring & Reporting': ['mean', 'max', 'std']
                               }).reindex(['Large Cap', 'Mid Cap', 'Small Cap'])

Carbon_Footprint_of_the_Portfolio_avg = df_us_filtered[('Carbon footprint of the portfolio', 'mean')].tolist()
Carbon_Footprint_of_the_Portfolio_max = df_us_filtered[('Carbon footprint of the portfolio', 'max')].tolist()
cp_std_dev = df_us_filtered[('Carbon footprint of the portfolio', 'std')].tolist()

Portfolio_Decarbonization_Strategy_avg = df_us_filtered[('Portfolio Decarbonization Strategy', 'mean')].tolist()
Portfolio_Decarbonization_Strategy_max = df_us_filtered[('Portfolio Decarbonization Strategy', 'max')].tolist()
pd_std_dev = df_us_filtered[('Portfolio Decarbonization Strategy', 'std')].tolist()

Monitoring_and_Reporting_avg = df_us_filtered[('Monitoring & Reporting', 'mean')].tolist()
Monitoring_and_Reporting_max = df_us_filtered[('Monitoring & Reporting', 'max')].tolist()
mr_std_dev = df_us_filtered[('Monitoring & Reporting', 'std')].tolist()

#plot
fig, axes = plt.subplots(1,3, figsize=(15, 5),dpi=600)
colors = [blue, green, orange]
axes[0].plot([],[],"D", label='Top Performer', color= colors[0])
axes[0].plot([],[], label='Standard Deviation', color= colors[0])
axes[1].plot([],[],"D", label='Top Performer', color= colors[1])
axes[1].plot([],[], label='Standard Deviation', color= colors[1])
axes[2].plot([],[],"D", label='Top Performer', color= colors[2])
axes[2].plot([],[], label='Standard Deviation', color= colors[2])

# cp
axes[0].bar(categories, Carbon_Footprint_of_the_Portfolio_avg, yerr= cp_std_dev, capsize=5, color= colors[0], alpha=0.6, error_kw= {'ecolor' : colors[0]})
for i in range(len(categories)):
   axes[0].text(i, Carbon_Footprint_of_the_Portfolio_max[i], '◆', fontsize=20, ha='center', color=colors[0])
for i,j in enumerate(Carbon_Footprint_of_the_Portfolio_avg):
   axes[0].text(i,j+0.05,f"{j:.2f}", ha='center', color= 'black', fontsize=15)
for i, (j,s) in enumerate(zip(cp_std_dev, Carbon_Footprint_of_the_Portfolio_avg)):
   axes[0].text(i,j+s+0.25,f"±{j:.2f}", ha='center', color= 'black', fontsize=15)
    
#legend_text0= mpatches.Patch(label ='Standard Deviation:\nLarge:0.95\nMid:0.84\nSmall:0.49')
#axes[0].legend(handles=[legend_text0], loc='upper right')
#axes[0].plot([],[],"D", label='Top Performer', color= colors[0])
axes[0].set_title('Average of Carbon Footprint of the Portfolio',fontsize=15)

#pds
axes[1].bar(categories, Portfolio_Decarbonization_Strategy_avg, yerr= pd_std_dev, capsize=5, color= colors[1], alpha=0.6, error_kw= {'ecolor' : colors[1]})
for i in range(len(categories)):
   axes[1].text(i, Portfolio_Decarbonization_Strategy_max[i], '◆', fontsize=20, ha='center', color=colors[1])
for i,j in enumerate(Portfolio_Decarbonization_Strategy_avg):
    axes[1].text(i,j+0.05,f"{j:.2f}", ha='center', color= 'black', fontsize=15)
for i, (j,s) in enumerate(zip(pd_std_dev, Portfolio_Decarbonization_Strategy_avg)):
   axes[1].text(i,j+s+0.25,f"±{j:.2f}", ha='center', color= 'black', fontsize=15)
#axes[1].plot([],[],"D", label='Top Performer', color= colors[1])
axes[1].set_title('Average of Portfolio Decarbonization Strategy',fontsize=15)

#mr
axes[2].bar(categories, Monitoring_and_Reporting_avg, yerr= mr_std_dev, capsize=5, color= colors[2], alpha=0.6, error_kw= {'ecolor' : colors[2]})
for i in range(len(categories)):
   axes[2].text(i, Monitoring_and_Reporting_max[i], '◆', fontsize=20, ha='center', color=colors[2])
for i,j in enumerate(Monitoring_and_Reporting_avg):
    axes[2].text(i,j+0.05,f"{j:.2f}", ha='center', color= 'black', fontsize=15)
for i, (j,s) in enumerate(zip(mr_std_dev, Monitoring_and_Reporting_avg)):
   axes[2].text(i,j+s+0.25,f"±{j:.2f}", ha='center', color= 'black', fontsize=15)
#axes[2].plot([],[],"D", label='Top Performer', color= colors[1])
axes[2].set_title('Average of Monitoring and Reporting',fontsize=15)


for ax in axes:
    ax.set_ylim(0, 4.2)
    ax.legend(loc='upper right')
    ax.tick_params(labelsize=15)


plt.tight_layout()
plt.show() 
#plt.savefig('/Users/liuxin/figure_3.png')
